Table2_BM
#Creating proportion table
Table2_BM <- prop.table(Table2_BM,1)
#percentage & round to 3 decimal points
Table2_BM <- round(Table2_BM*100,3)
Table2_BM
#Setting the working directory.
knitr::opts_chunk$set(echo = TRUE)
#This sets the working directory
knitr::opts_knit$set(root.dir = 'C:/Users/mistr/OneDrive/Documents/Data')
#This section is for the basic set up.
#It will clear all the plots, the console and the workspace.
#It also sets the overall format for numbers.
if(!is.null(dev.list())) dev.off()
cat("\014")
rm(list=ls())
options(scipen=9)
#Load packages
if(!require(pastecs)){install.packages("pastecs")}
library("pastecs")
if(!require(lattice)){install.packages("lattice")}
library("lattice")
#a.This reads data into dataframe as a table.
Server_Data_BM <- read.table("PROG8430-23W-Assign02.txt",sep=",",header = TRUE)
#a.This reads data into dataframe as a table.
Server_Data_BM <- read.table("PROG8430-23W-Assign02.txt",sep=",",header = TRUE)
#This reads first 10 rows of data in dataframe
head(Server_Data_BM, 10)
#appending my intials BM (Bhavik Mistry) to variables
colnames(Server_Data_BM) <- paste(colnames(Server_Data_BM), "BM", sep = "_")
head(Server_Data_BM, 5)
#b.Changing character variable to factor
Server_Data_BM$Manufacturer_BM <- as.factor(Server_Data_BM$Manufacturer_BM)
Server_Data_BM$Server_BM <- as.factor(Server_Data_BM$Server_BM)
str(Server_Data_BM, 10)
#a.missing value filter
summary(Server_Data_BM)
#b.Low Variance
stat.desc(Server_Data_BM)  #Consider coefficient of var
table(Server_Data_BM$UC_BM)
Server_Data_BM <- Server_Data_BM[c(-11)]
head(Server_Data_BM,5)
#c.High corelation based reduction
#Setting the working directory.
knitr::opts_chunk$set(echo = TRUE)
#This sets the working directory
knitr::opts_knit$set(root.dir = 'C:/Users/mistr/OneDrive/Documents/Data')
#This section is for the basic set up.
#It will clear all the plots, the console and the workspace.
#It also sets the overall format for numbers.
if(!is.null(dev.list())) dev.off()
cat("\014")
rm(list=ls())
options(scipen=9)
#Load packages
if(!require(pastecs)){install.packages("pastecs")}
library("pastecs")
if(!require(lattice)){install.packages("lattice")}
library("lattice")
#a.This reads data into dataframe as a table.
Server_Data_BM <- read.table("PROG8430-23W-Assign02.txt",sep=",",header = TRUE)
#This reads first 10 rows of data in dataframe
head(Server_Data_BM, 10)
#appending my intials BM (Bhavik Mistry) to variables
colnames(Server_Data_BM) <- paste(colnames(Server_Data_BM), "BM", sep = "_")
head(Server_Data_BM, 5)
#b.Changing character variable to factor
Server_Data_BM$Manufacturer_BM <- as.factor(Server_Data_BM$Manufacturer_BM)
Server_Data_BM$Server_BM <- as.factor(Server_Data_BM$Server_BM)
str(Server_Data_BM, 10)
#a.missing value filter
summary(Server_Data_BM)
#b.Low Variance
stat.desc(Server_Data_BM)  #Consider coefficient of var
table(Server_Data_BM$UC_BM)
Server_Data_BM <- Server_Data_BM[c(-11)]
head(Server_Data_BM,5)
#c.High corelation based reduction
Server_Data_Temp_BM <- Server_Data_BM[c(-1,-2,-3)]
cor(Server_Data_Temp_BM)
#Setting the working directory.
knitr::opts_chunk$set(echo = TRUE)
#This sets the working directory
knitr::opts_knit$set(root.dir = 'C:/Users/mistr/OneDrive/Documents/Data')
#This section is for the basic set up.
#It will clear all the plots, the console and the workspace.
#It also sets the overall format for numbers.
if(!is.null(dev.list())) dev.off()
cat("\014")
rm(list=ls())
options(scipen=9)
#Load packages
if(!require(pastecs)){install.packages("pastecs")}
library("pastecs")
if(!require(lattice)){install.packages("lattice")}
library("lattice")
#a.This reads data into dataframe as a table.
Data_BM <- read.table("PROG8430-23W-Assign03.txt",sep=",",header = TRUE)
#This reads first 10 rows of data in dataframe
head(Data_BM, 10)
#appending my intials BM (Bhavik Mistry) to variables
colnames(Data_BM) <- paste(colnames(Data_BM), "BM", sep = "_")
head(Data_BM, 5)
str(Data_BM, 10)
norm01_BM <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
Data_BM$Food_BM <- norm01_BM(Data_BM$Food_BM)
Data_BM$Enter_BM <- norm01_BM(Data_BM$Enter_BM)
Data_BM$Edu_BM <- norm01_BM(Data_BM$Edu_BM)
Data_BM$Trans_BM <- norm01_BM(Data_BM$Trans_BM)
Data_BM$Work_BM <- norm01_BM(Data_BM$Work_BM)
Data_BM$House_BM <- norm01_BM(Data_BM$House_BM)
Data_BM$Oth_BM <- norm01_BM(Data_BM$Oth_BM)
par(mfrow=c(3,2))
for (i in 1:ncol(Data_BM)) {
if (is.numeric(Data_BM[,i])) {
boxplot(Data_BM[i], main=names(Data_BM)[i],
horizontal=TRUE, pch=19)
}
}
par(mfrow=c(1,1))
barplot(table(Server_Data_BM$Server_BM), cex.names=.75, main = "Server looks normal")
#Setting the working directory.
knitr::opts_chunk$set(echo = TRUE)
#This sets the working directory
knitr::opts_knit$set(root.dir = 'C:/Users/mistr/OneDrive/Documents/Data')
#This section is for the basic set up.
#It will clear all the plots, the console and the workspace.
#It also sets the overall format for numbers.
if(!is.null(dev.list())) dev.off()
cat("\014")
rm(list=ls())
options(scipen=9)
#Load packages
if(!require(pastecs)){install.packages("pastecs")}
library("pastecs")
if(!require(lattice)){install.packages("lattice")}
library("lattice")
#a.This reads data into dataframe as a table.
Server_Data_BM <- read.table("PROG8430-23W-Assign02.txt",sep=",",header = TRUE)
#This reads first 10 rows of data in dataframe
head(Server_Data_BM, 10)
#appending my intials BM (Bhavik Mistry) to variables
colnames(Server_Data_BM) <- paste(colnames(Server_Data_BM), "BM", sep = "_")
head(Server_Data_BM, 5)
#b.Changing character variable to factor
Server_Data_BM$Manufacturer_BM <- as.factor(Server_Data_BM$Manufacturer_BM)
Server_Data_BM$Server_BM <- as.factor(Server_Data_BM$Server_BM)
str(Server_Data_BM, 10)
#a.missing value filter
summary(Server_Data_BM)
#b.Low Variance
stat.desc(Server_Data_BM)  #Consider coefficient of var
table(Server_Data_BM$UC_BM)
Server_Data_BM <- Server_Data_BM[c(-11)]
head(Server_Data_BM,5)
#c.High corelation based reduction
Server_Data_Temp_BM <- Server_Data_BM[c(-1,-2,-3)]
cor(Server_Data_Temp_BM)
Server_Data_BM <- Server_Data_BM[c(-9,-10)]
head(Server_Data_BM,5)
Server_Data_BM <- Server_Data_BM[c(-1)]
head(Server_Data_BM,5)
#a.Identifying Outliers
boxplot(Server_Data_BM$Conn_BM, horizontal=TRUE,main="Connections made", pch=20)
boxplot(Server_Data_BM$ST_BM, horizontal = TRUE,main="Session Timeouts", pch=20)
boxplot(Server_Data_BM$SMBR_BM, horizontal = TRUE,main="Server Message Blocks receieved", pch=20)
boxplot(Server_Data_BM$SMBT_BM, horizontal = TRUE,main="Server Message Blocks Transmitted", pch=20)
boxplot(Server_Data_BM$FA_BM, horizontal = TRUE,main="Files Accessed", pch=20)
densityplot(~ Server_Data_BM$Conn_BM,xlab="Connections Made", main = "connection made looks normal")
densityplot(~ Server_Data_BM$RC_BM,xlab="Reconnections Made", main = "Reconnections made")
histogram(~ Server_Data_BM$RC_BM,xlab="Reconnections Made", main = "Reconnections made")
densityplot(~ Server_Data_BM$ST_BM,xlab="Session Timeout", main = "Session Time-out looks a bit skewed")
densityplot(~ Server_Data_BM$SMBR_BM,xlab="Server Message Blocks Receieved", main = "SMBR looks normal")
densityplot(~ Server_Data_BM$SMBT_BM,xlab="Server Message Blocks Transmitted", main = "SMBT looks normal")
densityplot(~ Server_Data_BM$FA_BM,xlab="Files Accessed looks normal", main = "Files accessed looks normal")
nr_BM <- which(Server_Data_BM$Conn_BM < 1500 | Server_Data_BM$Conn_BM > 12000)
Server_Data_BM <- Server_Data_BM[-c(nr_BM),]
densityplot(~ Server_Data_BM$Conn_BM,xlab = "Connections made", main="removed distanced valued outliers")
min_BM = quantile(Server_Data_BM$RC_BM,0.25)-(1.5*IQR(Server_Data_BM$RC_BM))
#Q2-1.5*IQR
nr_BM <- which( Server_Data_BM$RC_BM < min_BM )
Server_Data_BM <- Server_Data_BM[-c(nr_BM),]
max_BM = quantile(Server_Data_BM$RC_BM,0.75)+(1.5*IQR(Server_Data_BM$RC_BM))
#Q3+1.5*IQR
nr_BM <- which( Server_Data_BM$RC_BM > max_BM )
Server_Data_BM <- Server_Data_BM[-c(nr_BM),]
densityplot(~ Server_Data_BM$RC_BM,xlab = "Reconnection made", main="Recoonections made after removing outliers")
nr_BM <- which(Server_Data_BM$ST_BM < 30 | Server_Data_BM$ST_BM > 400)
Server_Data_BM <- Server_Data_BM[-c(nr_BM),]
densityplot(~ Server_Data_BM$ST_BM,xlab="Session Timeout", main="Session Timeout After removing distanced valued outliers")
barplot(table(Server_Data_BM$Server_BM), cex.names=.75, main = "Server looks normal")
barplot(table(Server_Data_BM$Server_BM), cex.names=.75, main = "Server looks normal")
barplot(table(Server_Data_BM$Manufacturer_BM), cex.names=.75,main = "Manufacturer looks normal")
norm01_BM <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
Data_BM$Food_BM <- norm01_BM(Data_BM$Food_BM)
#Setting the working directory.
knitr::opts_chunk$set(echo = TRUE)
#This sets the working directory
knitr::opts_knit$set(root.dir = 'C:/Users/mistr/OneDrive/Documents/Data')
#This section is for the basic set up.
#It will clear all the plots, the console and the workspace.
#It also sets the overall format for numbers.
if(!is.null(dev.list())) dev.off()
cat("\014")
rm(list=ls())
options(scipen=9)
#Load packages
if(!require(pastecs)){install.packages("pastecs")}
library("pastecs")
if(!require(lattice)){install.packages("lattice")}
library("lattice")
#a.This reads data into dataframe as a table.
Data_BM <- read.table("PROG8430-23W-Assign03.txt",sep=",",header = TRUE)
#This reads first 10 rows of data in dataframe
head(Data_BM, 10)
#appending my intials BM (Bhavik Mistry) to variables
colnames(Data_BM) <- paste(colnames(Data_BM), "BM", sep = "_")
head(Data_BM, 5)
str(Data_BM, 10)
norm01_BM <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
Data_BM$Food_BM <- norm01_BM(Data_BM$Food_BM)
Data_BM$Enter_BM <- norm01_BM(Data_BM$Enter_BM)
Data_BM$Edu_BM <- norm01_BM(Data_BM$Edu_BM)
Data_BM$Trans_BM <- norm01_BM(Data_BM$Trans_BM)
Data_BM$Work_BM <- norm01_BM(Data_BM$Work_BM)
Data_BM$House_BM <- norm01_BM(Data_BM$House_BM)
Data_BM$Oth_BM <- norm01_BM(Data_BM$Oth_BM)
par(mfrow=c(3,2))
for (i in 1:ncol(Data_BM)) {
if (is.numeric(Data_BM[,i])) {
boxplot(Data_BM[i], main=names(Data_BM)[i],
horizontal=TRUE, pch=19)
}
}
par(mfrow=c(1,1))
clear
intall.packages("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguines")
library("palmerpenguins")
summary(penguins)
View(penguins)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
setwd("C:/Users/mistr/Downloads/Portfolio/bellaboom")
setwd("C:/Users/mistr/Downloads/Portfolio/bellaboom")
knitr::opts_chunk$set(echo = TRUE)
#First import some packages
library(tidyverse)
library(skimr)
library(janitor)
library(waffle)
install waffle
library(tidyr)
#First import some packages
library(tidyverse)
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
activity <- read.csv("/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
activity <- read.csv("../mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
activity <- read.csv("bellaboom\mturkfitbit_export_4.12.16-5.12.16\Fitabase Data 4.12.16-5.12.16\dailyActivity_merged.csv)
activity <- read.csv("bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv)
activity
activity.head(10)
activity <- read.csv("bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
activity <- read.csv("bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
activity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
activity.head(10)
head(activity)
weight <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
view(activity)
head(activity, 10)
head(intensity, 10)
head(intensity, 10)
activity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
calories <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyCalories_merged.csv")
intensity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
sleep <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
weight <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
head(intensity, 10)
activity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
calories <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyCalories_merged.csv")
intensities <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
sleep <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
weight <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
head(intensities, 10)
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
intensities$time <- format(intensities$ActivityHour, format = "%H:%M:%S")
intensities$date <- format(intensities$ActivityHour, format = "%m/%d/%y")
head(intensities, 10)
#Intensity
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
#Intensity
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
intensities$time <- format(intensities$ActivityHour, format = "%H:%M:%S")
intensities$date <- format(intensities$ActivityHour, format = "%m/%d/%y")
# calories
calories$ActivityHour=as.POSIXct(calories$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
head(calories, 10)
calories <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
#Intensity
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
intensities$time <- format(intensities$ActivityHour, format = "%H:%M:%S")
intensities$date <- format(intensities$ActivityHour, format = "%m/%d/%y")
# calories
calories$ActivityHour=as.POSIXct(calories$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
calories$time <- format(calories$ActivityHour, format = "%H:%M:%S")
calories$date <- format(calories$ActivityHour, format = "%m/%d/%y")
# activity
activity$ActivityDate=as.POSIXct(activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
activity$date <- format(activity$ActivityDate, format = "%m/%d/%y")
# sleep
sleep$SleepDay=as.POSIXct(sleep$SleepDay, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
sleep$date <- format(sleep$SleepDay, format = "%m/%d/%y")
head(calories, 10)
n_distinct(activities)
n_distinct(activity)
n_distinct(activity$Id)
n_distinct(weight$Id)
n_distinct(activity$Id)
n_distinct(calories$Id)
n_distinct(intensities$Id)
n_distinct(sleep$Id)
n_distinct(weight$Id)
#Activity
summary(activity)
#Activity
activity %>%
select(TotalSteps,
TotalDistance,
SedentaryMinutes, Calories) %>%
summary()
#Calories
calories.summary()
calories.summary()
#Activity summary of sedentary time
activity %>%
select(TotalSteps,
TotalDistance,
SedentaryMinutes, Calories) %>%
summary()
#Acrivity summary of active time
activity %>%
select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes) %>%
summary()
#Calories
calories.summary()
#Calories
summary(calories)
intensities %>%
select(intensities) %>%
summary()
# sleep
sleep %>%
select(TotalSleepRecords, TotalMinutesAsleep, TotalTimeInBed) %>%
summary()
# weight
weight %>%
select(WeightKg, BMI) %>%
summary()
```
activity %>%
select(TotalSteps,
TotalDistance,
SedentaryMinutes, Calories) %>%
summary()
activity %>%
select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes) %>%
summary()
#Activity summary of sedentary time
activity %>%
select(TotalSteps,
TotalDistance,
SedentaryMinutes, Calories) %>%
summary()
summary(calories)
activity %>%
select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes) %>%
summary()
sleep %>%
select(TotalSleepRecords, TotalMinutesAsleep, TotalTimeInBed) %>%
summary()
summary(calories)
activity %>%
select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes) %>%
summary()
weight %>%
select(WeightKg, BMI) %>%
summary()
#Acrivity summary of active time
activity %>%
select(VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes) %>%
summary()
head(merged_data)
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
head(merged_data)
knitr::opts_chunk$set(echo = TRUE)
#First import some packages
library(tidyverse)
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
activity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
calories <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
intensities <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
sleep <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
weight <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
head(calories, 10)
#Intensity
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
intensities$time <- format(intensities$ActivityHour, format = "%H:%M:%S")
intensities$date <- format(intensities$ActivityHour, format = "%m/%d/%y")
# calories
calories$ActivityHour=as.POSIXct(calories$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
calories$time <- format(calories$ActivityHour, format = "%H:%M:%S")
calories$date <- format(calories$ActivityHour, format = "%m/%d/%y")
# activity
activity$ActivityDate=as.POSIXct(activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
activity$date <- format(activity$ActivityDate, format = "%m/%d/%y")
# sleep
sleep$SleepDay=as.POSIXct(sleep$SleepDay, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
sleep$date <- format(sleep$SleepDay, format = "%m/%d/%y")
n_distinct(activity$Id)
n_distinct(calories$Id)
n_distinct(intensities$Id)
n_distinct(sleep$Id)
n_distinct(weight$Id)
# Data cleaning - checking for duplicate entries
sum(duplicated(activity))
sum(duplicated(steps))
activity <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
calories <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
intensities <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
sleep <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
weight <- read.csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
steps <- read_csv("../bellaboom/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailySteps_merged.csv")
head(steps
, 10)
n_distinct(steps)
sum(duplicated(steps))
# Data cleaning - checking for duplicate entries
sum(duplicated(activity))
sum(duplicated(steps))
sum(duplicated(sleep))
sum(duplicated(intensities))
sum(duplicated(steps))
n_distinct(activity$Id)
n_distinct(calories$Id)
n_distinct(intensities$Id)
n_distinct(sleep$Id)
n_distinct(weight$Id)
n_distinct(steps)
n_distinct(steps$Id)
n_distinct(activity$Id)
n_distinct(calories$Id)
n_distinct(intensities$Id)
n_distinct(sleep$Id)
n_distinct(weight$Id)
n_distinct(steps$Id)
sleep <- sleep %>%
distinct() %>%
drop_na()
sum(duplicated(sleep))
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
view(sleep)
#Intensity
intensities$ActivityHour = as.POSIXct(intensities$ActivityHour, format ="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
intensities$time <- format(intensities$ActivityHour, format = "%H:%M:%S")
intensities$date <- format(intensities$ActivityHour, format = "%m/%d/%y")
# calories
calories$ActivityHour=as.POSIXct(calories$ActivityHour, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
calories$time <- format(calories$ActivityHour, format = "%H:%M:%S")
calories$date <- format(calories$ActivityHour, format = "%m/%d/%y")
# activity
activity$ActivityDate=as.POSIXct(activity$ActivityDate, format="%m/%d/%Y", tz=Sys.timezone())
activity$date <- format(activity$ActivityDate, format = "%m/%d/%y")
# sleep
sleep$SleepDay=as.POSIXct(sleep$SleepDay, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
sleep$date <- format(sleep$SleepDay, format = "%m/%d/%y")
view(sleep)
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
head(merged_data)
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
head(merged_data)
# Analysis - relationship between steps taken in a day and sedentary minutes
ggplot(data=merge_date, aes(x=TotalSteps, y=SedentaryMinutes))+ geom_point() +
geom_smooth() + labs(title = "Daily Steps vs Sedentary Time")
# Analysis - relationship between steps taken in a day and sedentary minutes
ggplot(data=merge_data, aes(x=TotalSteps, y=SedentaryMinutes))+ geom_point() +
geom_smooth() + labs(title = "Daily Steps vs Sedentary Time")
merged_data <- merge(sleep, activity, by=c('Id', 'date'))
head(merged_data)
# Analysis - relationship between steps taken in a day and sedentary minutes
ggplot(data=merge_data, aes(x=TotalSteps, y=SedentaryMinutes))+ geom_point() +
geom_smooth() + labs(title = "Daily Steps vs Sedentary Time")
# Analysis - relationship between steps taken in a day and sedentary minutes
ggplot(data=merged_data, aes(x=TotalSteps, y=SedentaryMinutes))+ geom_point() +
geom_smooth() + labs(title = "Daily Steps vs Sedentary Time")
ggplot(data=merged_data, aes(x=TotalMinutesAsleep, y=TotalTimeInBed))+geom_point() +
geom_smooth() + labs(title = "Time Asleep vs Time in Bed")
